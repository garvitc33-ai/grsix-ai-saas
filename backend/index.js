import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import axios from "axios";
import twilio from "twilio";
import nodemailer from "nodemailer";
import http from "http";
import { Server as SocketIOServer } from "socket.io";

import leadsRoutes from "./routes/leads.js";
import knowledgeBaseRoutes from "./routes/knowledgeBase.js";
import agentRoutes from "./routes/agent.js";
import campaignRoutes from "./routes/Campaigns.js";
import scheduleRoutes from "./routes/schedule.js";
import voiceHandler from "./twilio/voiceHandler.js";
import { generateEmailFromWebsite } from "./ai.js";
import db from "./sqlite.js";
import campaignStatusRoutes from "./routes/campaignstatus.js";
import chatbotRoutes from "./routes/chatbot.js";

dotenv.config();

const app = express();
const port = process.env.PORT || 3010;

const server = http.createServer(app);
const io = new SocketIOServer(server, { cors: { origin: "*" } });
app.set("io", io);

io.on("connection", (socket) => {
  console.log("üì° New analytics dashboard client connected");
});

app.use(cors());
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.use("/leads", leadsRoutes);
app.use("/api/knowledgebase", knowledgeBaseRoutes);
app.use("/api/agent", agentRoutes);
app.use("/api/schedule", scheduleRoutes);
app.use("/api/twilio", voiceHandler);
app.use("/api/campaigns", campaignStatusRoutes);
app.use("/api/chatbot", chatbotRoutes);
app.use("/api", campaignRoutes);

app.post("/api/generate-email", async (req, res) => {
  const { url } = req.body;
  if (!url) return res.status(400).json({ message: "Website URL is required" });
  try {
    const rawEmail = await generateEmailFromWebsite(url);
    res.status(200).json({ email: rawEmail });
  } catch (err) {
    console.error("‚ùå Error generating email:", err);
    res.status(500).json({ message: "Failed to generate cold email" });
  }
});

app.post("/api/send-email", async (req, res) => {
  const { url, to } = req.body;
  if (!url || !to)
    return res.status(400).json({ message: "URL and recipient email required" });
  try {
    const rawEmail = await generateEmailFromWebsite(url);
    const brandName = new URL(url).hostname.replace("www.", "").split(".")[0].toUpperCase();
    const subject = `Boost ${brandName} with Smart AI Follow-Ups`;

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: `"GRSIX AI" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      text: rawEmail,
    });

    await db.runAsync(
      `INSERT INTO email_leads (email, subject, preview, content, category, follow_up_status, time)
       VALUES (?, ?, ?, ?, ?, ?, ?)`,
      [to, subject, rawEmail.slice(0, 50), rawEmail, "MEDIUM", "pending", new Date().toISOString()]
    );

    res.status(200).json({ message: "Email sent and saved!", emailBody: rawEmail });
  } catch (err) {
    console.error("‚ùå Error sending email:", err);
    res.status(500).json({ message: "Failed to send email" });
  }
});

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
let conversationMemory = [];

app.get("/call", async (req, res) => {
  try {
    await client.calls.create({
      to: process.env.MY_PHONE_NUMBER,
      from: process.env.TWILIO_PHONE_NUMBER,
      url: `${process.env.NGROK_URL}/voice`,
    });
    res.send("üìû Call started!");
  } catch (err) {
    console.error(err);
    res.status(500).send("‚ùå Error starting call.");
  }
});

app.post("/voice", (req, res) => {
  console.log("‚úÖ /voice route hit");
  const twiml = new twilio.twiml.VoiceResponse();
  conversationMemory = [];

  const intro = `
    <speak>
      ‡§®‡§Æ‡§∏‡•ç‡§§‡•á ‡§ó‡§∞‡§µ‡§ø‡§§! <break time="300ms"/> ‡§Æ‡•à‡§Ç GRSIX AI ‡§ï‡•Ä ‡§è‡§µ‡§æ ‡§¨‡•ã‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•Ç‡§Å‡•§
      <break time="400ms"/> ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•Ä ‡§π‡•Ç‡§Å?
    </speak>`;

  twiml.say({ voice: "Polly.Aditi", language: "hi-IN" }, intro);

  twiml.gather({
    input: "speech",
    timeout: 5,
    speechTimeout: "auto",
    action: "/gather",
  });

  res.type("text/xml");
  res.send(twiml.toString());
});

app.post("/gather", async (req, res) => {
  const userSpeech = req.body.SpeechResult || "‡§ï‡•ã‡§à ‡§Ü‡§µ‡§æ‡§ú‡§º ‡§®‡§π‡•Ä‡§Ç ‡§∏‡•Å‡§®‡•Ä ‡§ó‡§à‡•§";
  console.log("üß† ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡•á ‡§ï‡§π‡§æ:", userSpeech);
  conversationMemory.push({ role: "user", content: userSpeech });

  const basePrompt = {
    role: "system",
    content: `
      ‡§§‡•Å‡§Æ ‡§è‡§µ‡§æ ‡§π‡•ã, GRSIX AI ‡§ï‡•Ä ‡§è‡§ï ‡§Æ‡§¶‡§¶‡§ó‡§æ‡§∞, ‡§µ‡§ø‡§®‡§Æ‡•ç‡§∞, ‡§î‡§∞ ‡§á‡§Ç‡§∏‡§æ‡§® ‡§ú‡•à‡§∏‡•Ä AI ‡§µ‡•â‡§Ø‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§π‡•ã‡•§
      ‡§§‡•Å‡§Æ ‡§ó‡§∞‡§µ‡§ø‡§§ ‡§ï‡•ã ‡§ï‡•â‡§≤ ‡§ï‡§∞ ‡§∞‡§π‡•Ä ‡§π‡•ã‡•§ ‡§§‡•Å‡§Æ ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§π‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡•Ä ‡§π‡•ã‡•§
      ‡§§‡•Å‡§Æ ‡§è‡§ï ‡§Ö‡§∏‡§≤‡•Ä ‡§á‡§Ç‡§∏‡§æ‡§® ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•ã ‚Äî ‡§õ‡•ã‡§ü‡•á, ‡§ó‡§∞‡•ç‡§Æ‡§ú‡•ã‡§∂‡•Ä ‡§∏‡•á, ‡§î‡§∞ ‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á‡•§
      ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•ã ‡§î‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§æ‡§ï‡•É‡§§‡§ø‡§ï ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡•ã, ‡§ú‡•à‡§∏‡•á ‡§è‡§ï ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•ã‡•§ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡§º‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§Æ‡§§ ‡§ï‡§∞‡•ã‡•§
    `,
  };

  const fullConversation = [basePrompt, ...conversationMemory];
  let aiReply = "‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è, ‡§ï‡•Å‡§õ ‡§ó‡§°‡§º‡§¨‡§°‡§º ‡§π‡•ã ‡§ó‡§à ‡§π‡•à‡•§";

  try {
    const groqResponse = await axios.post(
      "https://api.groq.com/openai/v1/chat/completions",
      {
        model: "llama3-70b-8192",
        messages: fullConversation,
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );
    const reply = groqResponse.data.choices[0].message.content;
    conversationMemory.push({ role: "assistant", content: reply });
    aiReply = `<speak><break time="300ms"/>${reply.replace(/\n/g, "<break time='400ms'/>")}</speak>`;
  } catch (err) {
    console.error("‚ùå Groq API error:", err.message);
  }

  const twiml = new twilio.twiml.VoiceResponse();

  twiml.say({ voice: "Polly.Aditi", language: "hi-IN" }, aiReply);

  twiml.gather({
    input: "speech",
    timeout: 5,
    speechTimeout: "auto",
    action: "/gather",
  }).say({ voice: "Polly.Aditi", language: "hi-IN" }, `<speak>‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?</speak>`);

  res.type("text/xml");
  res.send(twiml.toString());
});

app.get("/", (req, res) => {
  res.send("‚úÖ GRSIX AI Unified Server is running!");
});

import "./callScheduler.js";

// ‚úÖ Serve frontend build from /frontend/dist
const __dirname = path.dirname(fileURLToPath(import.meta.url));
app.use(express.static(path.join(__dirname, "../frontend/dist")));

app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname, "../frontend/dist/index.html"));
});


server.listen(port, () => {
  console.log(`üöÄ Unified server running at http://localhost:${port}`);
});

export default app;
